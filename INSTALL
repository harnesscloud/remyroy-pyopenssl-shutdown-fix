
INSTALLATION INSTRUCTIONS FOR pyOpenSSL
------------------------------------------------------------------------------

I have tested this on Debian Linux systems (woody and sid), Solaris 2.6 and
2.7. Others have successfully compiled it on Windows and NT.


-- Building the Module on a Unix System --

pyOpenSSL uses distutils, so there really shouldn't be any problems. To build
the library:

  $ python setup.py build

If your OpenSSL header files aren't in /usr/include, you may need to supply
the -I flag to let the setup script know where to look. The same goes for the
libraries of course, use the -L flag. Note that build won't accept these
flags, so you have to run first build_ext and then build! Example:

  $ python setup.py build_ext -I/usr/local/ssl/include -L/usr/local/ssl/lib
  $ python setup.py build

Now you should have a directory called OpenSSL that contains e.g. SSL.so and
__init__.py somewhere in the build dicrectory, so just:

  $ python setup.py install

If you, for some arcane reason, don't want the module to appear in the
site-packages directory, use the --prefix option.

You can, of course, do

  $ python setup.py --help

to find out more about how to use the script.


-- Building the Module on a Windows System --

pyOpenSSL is known to build with mingw32 for Python 2.3 through Python 2.5. 
For Python 2.6, the official Windows installer of which is built with
Microsoft Visual Studio 2008 (version 9.0), Microsoft Visual Studio 2008
(version 9.0) is required.  You can specify that mingw32 be used by passing
the --compiler argument to build_ext.  You will also need to specify the
location of the OpenSSL headers and libraries:

  C:\pyOpenSSL-X.Y> setup.py build_ext -c mingw32 -I C:\OpenSSL\include ^
                      -L C:\OpenSSL bdist_msi

The correct header and library paths depend on how you have OpenSSL
installed.  The above paths are correct for the default installation of
(<http://www.slproweb.com/products/Win32OpenSSL.html>).

The bdist_msi command will build an MSI installer.  It can be substituted
with another bdist command if another kind of installer is desired.

To build with MSVC instead, omit the -c option and pass a slightly different
library directory:

  C:\pyOpenSSL-X.Y> setup.py build_ext -I C:\OpenSSL\include ^
                      -L C:\OpenSSL\lib bdist_msi

The resulting binary distribution will be placed in the dist directory. To
install it, dDepending on what kind of distribution you create, run it,
unzip it, or copy it to Python installation's site-packages.

And similarily, you can do

    setup.py --help

to get more information.

Big thanks to Itamar Shtull-Trauring, Oleg Orlov, Zooko O'Whielacronx, Chris
Galvan, and #python and #distutils on FreeNode for their help with Windows
build instructions.

-- Documentation --

The documentation is written in LaTeX, using the standard Python templates,
and tools to compile it into a number of forms are included.  You need to
supply things like dvips, latex2html yourself of course!

To build the text, html, postscript or dvi forms of the documentation, this is
what you do:

    cd doc
    # To make the text-only documentation:
    make text
    # To make the dvi form:
    make dvi

It's as simple as that.  Note that since Python's mkhowto script is used, if
you do first ``make dvi'' and then ``make ps'', the dvi file will disappear.
I included a special build target ``make all'' that will build all the
documentation in an order that won't let anything disappear.


@(#) $Id: INSTALL,v 1.7 2002/06/14 12:14:19 martin Exp $
